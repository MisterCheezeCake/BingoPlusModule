register("postGuiRender", () => {

    //const txt = 'hi'
    //Renderer.scale(data.communityGoalDisplay.scale)
    //const rectangle = new Rectangle(Renderer.color(0, 0, 0, 50), 0, 0, width, height) // background
    //rectangle.draw()
    //Renderer.translate(data.communityGoalDisplay.x, data.communityGoalDisplay.y, 999)
    //Renderer.drawString(txt, 0, 0)
    
    //Renderer.finishDraw()

    
    if (!Settings.communityGoalDisplay || !Skyblock.inSkyblock) return
    let inv = Player.getContainer()
    if (!bingoCardOpened && inv?.getName() == "Bingo Card") {
        const community_slots = [2, 12, 22, 32, 42]
        let guiElements = {
            name: "&6&lCommunity Goals",
            goals: [
                ["Goal 1", "Contribution", "(Top %)", 0],
                ["Goal 2", "Contribution", "(Top %)", 0],
                ["Goal 3", "Contribution", "(Top %)", 0],
                ["Goal 4", "Contribution", "(Top %)", 0],
                ["Goal 5", "Contribution", "(Top %)", 0]
            //    name      contribution     top %    goal tier
            ]
        }
        lines = 'Loading Community Goal data...'
        bingoCardOpened = true

        let guiLoaded = register("tick", (t) => {

            let closeListener = register("guiClosed", () => {
                bingoCardOpened = false
                guiLoaded?.unregister()
                closeListener?.unregister()
                refresh?.unregister()
                display?.clearLines()
            })
            
            if (inv?.getStackInSlot(inv?.getSize() - 37) == null) return
                
            guiLoaded.unregister()

            let refresh = register("step", () => {
                let items = community_slots.map(slot => inv.getItems()[slot])

                for (let i = 0; i < 5; i++) {
                    let item = items[i]
                    guiElements.goals[i][0] = item.getName()

                    let contribution = ''
                    for (const line of item.getLore()){
                        //console.log(line)
                        if (/§5§o§7Contribution: .*/g.test(line)) guiElements.goals[i][1] = `${line.replace("§5§o§7Contribution: ",'')}`
                        if (/§7§cYou have not contributed towards/g.test(line)) guiElements.goals[i][1] = `&cNo contribution!&r`
                        if (/  §8Top .*/g.test(line)) contribution = ` &f(Top${line.replace('  §8Top','')}&f)`
                        if (/  §6§l#\d+ §fcontributor/g.test(line)) contribution = ` &8(${line.replace('  ','')}&8)`

                    }
                    guiElements.goals[i][2] = contribution
                }

                compileLines(guiElements)

            }).setFps(1)
        })
    } 
})